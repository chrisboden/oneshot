#!/bin/bash

# export_as_screenshot_from_html - Convert HTML file to PNG screenshot and open it
# Usage: ./export_as_screenshot_from_html <path_to_html_file> [--visible-only]

set -e  # Exit on any error

# Default to full page screenshot
VISIBLE_ONLY=false

# Check if argument is provided
if [ $# -eq 0 ]; then
    echo "Usage: $0 <path_to_html_file> [--visible-only]"
    echo "Example: $0 /path/to/report.html"
    echo "         $0 ./myreport.html --visible-only"
    echo ""
    echo "Options:"
    echo "  --visible-only    Capture only the visible viewport (100vh)"
    echo "  (default)         Capture the entire page length"
    exit 1
fi

HTML_FILE="$1"

# Check for visible-only flag
if [ "$2" = "--visible-only" ]; then
    VISIBLE_ONLY=true
fi

# Check if HTML file exists
if [ ! -f "$HTML_FILE" ]; then
    echo "Error: HTML file '$HTML_FILE' not found"
    exit 1
fi

# Get absolute path of HTML file
HTML_ABS_PATH=$(realpath "$HTML_FILE")

# Get directory and filename without extension
HTML_DIR=$(dirname "$HTML_ABS_PATH")
HTML_BASENAME=$(basename "$HTML_FILE" .html)

# Output PNG path
if [ "$VISIBLE_ONLY" = true ]; then
    PNG_PATH="$HTML_DIR/$HTML_BASENAME-viewport.png"
else
    PNG_PATH="$HTML_DIR/$HTML_BASENAME-fullpage.png"
fi

echo "üì∏ Converting HTML to PNG screenshot..."
echo "üìÑ Input:  $HTML_ABS_PATH"
echo "üñºÔ∏è  Output: $PNG_PATH"
if [ "$VISIBLE_ONLY" = true ]; then
    echo "üìê Mode:   Visible viewport only (100vh)"
else
    echo "üìê Mode:   Full page length (default)"
fi

# Ensure puppeteer is installed
if [ ! -d "node_modules/puppeteer" ]; then
    echo "‚ö†Ô∏è  Installing Puppeteer..."
    npm install puppeteer --silent
fi

# Create the screenshot generator script directly in this directory
cat > screenshot_generator_temp.js << 'EOF'
const puppeteer = require('puppeteer');
const path = require('path');
const fs = require('fs');

async function generateScreenshot() {
    const htmlPath = process.argv[2];
    const pngPath = process.argv[3];
    const visibleOnly = process.argv[4] === 'true';
    
    if (!fs.existsSync(htmlPath)) {
        console.error('‚ùå Error: HTML file not found:', htmlPath);
        process.exit(1);
    }
    
    console.log('üöÄ Starting screenshot generation...');
    
    let browser;
    try {
        browser = await puppeteer.launch({
            headless: 'new',
            args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage']
        });
        
        const page = await browser.newPage();
        
        // Set viewport size
        await page.setViewport({
            width: 1920,
            height: 1080,
            deviceScaleFactor: 1
        });
        
        // Load the HTML file
        const fileUrl = `file://${htmlPath}`;
        console.log(`üìñ Loading: ${fileUrl}`);
        
        await page.goto(fileUrl, {
            waitUntil: 'networkidle0',
            timeout: 30000
        });
        
        // Wait for dynamic content and fonts to load
        console.log('‚è≥ Waiting for content to load...');
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        console.log('üì∏ Taking screenshot...');
        
        // Take screenshot with appropriate settings
        const screenshotOptions = {
            path: pngPath,
            type: 'png'
        };
        
        if (visibleOnly) {
            // Capture only the visible viewport
            screenshotOptions.clip = {
                x: 0,
                y: 0,
                width: 1920,
                height: 1080
            };
            console.log('üìê Capturing visible viewport only...');
        } else {
            // Capture the full page
            screenshotOptions.fullPage = true;
            console.log('üìê Capturing full page length...');
        }
        
        await page.screenshot(screenshotOptions);
        
        // Get file size
        const stats = fs.statSync(pngPath);
        const fileSizeInMB = (stats.size / 1024 / 1024).toFixed(2);
        
        console.log(`‚úÖ Screenshot generated successfully!`);
        console.log(`üìä File size: ${fileSizeInMB} MB`);
        
    } catch (error) {
        console.error('‚ùå Error generating screenshot:', error.message);
        process.exit(1);
    } finally {
        if (browser) {
            await browser.close();
        }
    }
}

// Handle process termination gracefully
process.on('SIGINT', () => {
    console.log('\nüõë Process interrupted');
    process.exit(1);
});

process.on('SIGTERM', () => {
    console.log('\nüõë Process terminated');
    process.exit(1);
});

generateScreenshot().catch(error => {
    console.error('‚ùå Fatal error:', error.message);
    process.exit(1);
});
EOF

# Run the screenshot generation
echo "üîß Running screenshot conversion..."
node screenshot_generator_temp.js "$HTML_ABS_PATH" "$PNG_PATH" "$VISIBLE_ONLY"

# Clean up temporary script
rm screenshot_generator_temp.js

# Check if PNG was created successfully
if [ -f "$PNG_PATH" ]; then
    echo "üéâ Success! Screenshot created at: $PNG_PATH"
    
    # Open the PNG
    echo "üñºÔ∏è  Opening screenshot..."
    if command -v open > /dev/null 2>&1; then
        # macOS
        open "$PNG_PATH"
    elif command -v xdg-open > /dev/null 2>&1; then
        # Linux
        xdg-open "$PNG_PATH"
    elif command -v start > /dev/null 2>&1; then
        # Windows (Git Bash/WSL)
        start "$PNG_PATH"
    else
        echo "üìã Screenshot ready at: $PNG_PATH"
        echo "   (Unable to auto-open - please open manually)"
    fi
else
    echo "‚ùå Error: Screenshot was not created"
    exit 1
fi

echo "‚ú® Done!" 